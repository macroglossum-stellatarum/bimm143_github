---
title: "Class 13: RNA-Seq Mini-Project"
author: "Kira"
format: gfm
---

## 1. Differential Expression Analysis

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

```{r}
library(DESeq2)
```

```{r}
colData = read.csv("GSE37704_metadata.csv", row.names=1)
head(colData)
```

```{r}
countDataTmp = read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countDataTmp)
```

>Q.1 Complete the code below to remove the troublesome first column from countData

```{r}
# Note we need to remove the odd first $length col
countData <- as.matrix(countDataTmp[,-1])
head(countData)
```

We want to check that the metadata and count data match:

```{r}
all(rownames(colData) == colnames(countData))
```

>Q.2 Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
# Filter count data where you have 0 read count across all samples.
to.keep <- rowSums(countData) != 0

countData <- countData[to.keep,]

nrow(countData)
head(countData)
```

Now we are ready to run our differential expression analysis:

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```

```{r}
dds
```

Next, get results for the HoxA1 knockdown versus control siRNA:

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

>Q.3 Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

Now we will make a volcano plot:

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

>Q.4 Improve this plot by completing the below code, which adds color and axis labels

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "green"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "purple"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
abline(v=c(-2,2),lty=2)

```

Now we can add gene annotation:

>Q.5 Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

>Q.6 Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file ="deseq_results.csv")
```

## 2. Pathway Analysis

Here we are going to use the `gage` package for pathway analysis. Once we have a list of enriched pathways, we're going to use the `pathview` package to draw pathway diagrams, shading the molecules in the pathway by their degree of up/down-regulation.

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs:

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

Now, let's try out the `pathview()` function from the pathview package to make a pathway plot with our RNA-Seq expression results shown in color:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

Now we can insert the image into our document:

![hsa04110](hsa04110.pathview.png)

You can play with the other input arguments to `pathview()` to change the display in various ways including generating a PDF graph:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

Now, let's process our results a bit more to automatically pull out the top 5 up-regulated pathways, then further process that just to get the pathway IDs needed by the `pathview()` function:

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

Finally, lets pass these IDs in keggresids to the `pathview()` function to draw plots for all the top 5 pathways:

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

We can include these top 5 up-regulated pathways in our document:

![hsa04640](hsa04640.pathview.png)

![hsa04630](hsa04630.pathview.png)

![hsa00140](hsa00140.pathview.png)

![hsa04142](hsa04142.pathview.png)

![hsa04330](hsa04330.pathview.png)

>Q.7 Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
## Focus on top 5 down-regulated pathways here for demo purposes only
keggrespathways.d <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids.d = substr(keggrespathways.d, start=1, stop=8)
keggresids.d
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids.d, species="hsa")
```

We can include these top 5 down-regulated pathways in our document:

![hsa04110](hsa04110.pathview.png)

![hsa03030](hsa03030.pathview.png)

![hsa03013](hsa03013.pathview.png)

![hsa03440](hsa03440.pathview.png)

![hsa04114](hsa04114.pathview.png)

## 3. Gene Ontology (GO)

We can also do a similar procedure with gene ontology. Similar to above, go.sets.hs has all GO terms. go.subs.hs is a named list containing indexes for the BP, CC, and MF ontologies:

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## 4. (Optional) Reactome Analysis

Reactome is database consisting of biological molecules and their relation to pathways and processes. Let's now conduct over-representation enrichment analysis and pathway-topology analysis with Reactome using the previous list of significant genes generated from our differential expression results above:

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

Could use the generated text file on the Reactome website to visualize additional information about the regulation of genes and the significance (p-values). 
