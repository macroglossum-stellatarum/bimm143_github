---
title: "Class 8: Mini Project"
author: "Kira"
format: gfm
---

The goal of this mini-project is for us to explore a complete analysis using the unsupervised learning techniques covered in class.

Values in this data set describe characteristics of the cell nuclei present in digitized images of a fine needle aspiration (FNA) of a breast mass.

## Data Import

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
head(wisc.df)
```

We want to remove the first column and keep it in a separate vector for later.
```{r}
# Using -1 here to remove the first column
wisc.data <- wisc.df[,-1]
head(wisc.data)
```

```{r}
# Creating a diagnosis vector for later 
diagnosis <- as.factor(wisc.df[,1])
```

## Exploratory data analysis

The first step of any data analysis, unsupervised or supervised, is to familiarize yourself with the data.

>Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

There are 569 observations (patients) in this data set.

>Q2. How many of the observations have a malignant diagnosis?

```{r}
table(diagnosis)
```

There are 212 malignant diagnoses in this data set.

>Q3. How many variables/features in the data are suffixed with _mean?

First find the column names.

```{r}
colnames(wisc.data)
```

Next I need to search somehow within the column name for "_mean" pattern. The `grep()` function might be able to help.

```{r}
inds <- grep("_mean",colnames(wisc.data))
length(inds)
```

There are 10 variables in the data set that have the "_mean" suffix.

>Q. How many dimensions are in this dataset?

```{r}
ncol(wisc.data)
```

There are 30 dimensions (columns) in this data set.

## Performing Principal Component Analysis (PCA)

It is important to check if the data need to be scaled before performing PCA.

```{r}
# Checking column means and standard deviations to look for variance
colMeans(wisc.data)

apply(wisc.data,2,sd)
```

```{r}
# Since there is a lot of variation among column means and standard deviation, I set scale=TRUE
wisc.pr <- prcomp(wisc.data, scale = TRUE)
summary(wisc.pr)
```

>Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27% of the original variance is captured by PC1.

>Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

PC1, PC2, and PC3 are need to capture at least 70% of the original variance. 3 PCs will capture 72%.

>Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs are needed to capture at least 90% of the original variance in the data. 7 PCs will capture 91%.

## Interpreting PCA results

```{r}
biplot(wisc.pr)
```

>Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

The plot is very difficult to understand and there is no way to tell which data points correspond to which patients or what proportion of patients have a malignant vs. benign diagnosis.

Let's make a better plot of PC1 and PC2.

```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```

```{r}
library(ggplot2)
pc <- as.data.frame(wisc.pr$x)
pc$diagnosis <- diagnosis
ggplot(pc) + aes(PC1, PC2, col=diagnosis) + geom_point()
```


Now, we can make a plot of PC1 and PC3.

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis , 
     xlab = "PC1", ylab = "PC3")
```

>Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

The plot of PC1 vs. PC2 has a clearer designation between the two groups since PC2 is capturing more variance than PC3.

## Variance explained

In this part of the exercise, I will produce scree plots showing the proportion of variance explained as the number of principal components increases.

We can start by calculating the variance of each principal component by squaring the sdev component of wisc.pr (i.e. wisc.pr$sdev^2).

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     type = "o")
```


```{r}
# Alternative scree plot of the same data
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

## Communicating PCA results

How much do the original variables contribute to the new PCs that we have calculated? To get at this data, we can look at the `$rotation` component of the returned PCA object.

>Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```

There is a complicated mix of variables that go together to make up PC1 - i.e. there are many of the original variables that together contribute higly to PC1.

```{r}
loadings <- as.data.frame(wisc.pr$rotation)
ggplot(loadings) + aes(PC1, rownames(loadings)) + geom_col()
```


>Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

The minimum number of PCs required to explain 80% of the variance of the data is 5 (84.7%).

## Hierarchical clustering

The goal of this section is to do hierarchical clustering of the original data.

```{r}
# First, I will scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

```{r}
data.dist <- dist(data.scaled, method="euclidean")
```

```{r}
wisc.hclust <- hclust(data.dist, method="complete")
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

>Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

The height at which the model has 4 clusters is approximately 19, but it's not clear where to cut the tree based on this model.

## Selecting number of clusters

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,k=4)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```

>Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

No. Changing the value of `k` doesn't result in a better cluster vs diagnoses match.

## Using different methods

>Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

The "ward.D2" method is the best because it gives the clearest visualization of the data.

## Combining methods, Clustering on PCA results

My PCA results were interesting as they showed a separation of M and B samples along PC1. Letâ€™s see if PCA improves or degrades the performance of hierarchical clustering. I will use `wisc.pr$x` as input to `hclust()`.

I will try clustering three PCs first (PC1, PC2, and PC3).

```{r}
d <- dist(wisc.pr$x[,1:3])
wisc.pr.hclust <- hclust(d,method="ward.D2")
```

```{r}
plot(wisc.pr.hclust)
```

Let's cut this tree into two groups/clusters.

```{r}
grps <- cutree(wisc.pr.hclust,k=2)
table(grps)
```

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2],col=grps)
```

How well do the two clusters separate the M and B diagnoses?

```{r}
table(grps, diagnosis)
```

```{r}
(179 + 333)/569
```

>Q15. How well does the newly created model with four clusters separate out the two diagnoses?

This clustering result (with four clusters) has 90% accuracy of finding the right diagnosis.
